1. detect track
2. map segements to create award lines
3. use award line 0 to be the car start point and start angle is perpendicular to award line 0


4. car shot out 5 rays, calculate length of the ray
def calculate_intersection(ray_start_x, ray_start_y, ray_angle, line_start_x, line_start_y, line_end_x, line_end_y):
    # Convert the ray angle to radians
    angle_rad = math.radians(ray_angle)

    # Calculate the slope of the line
    line_slope = (line_end_y - line_start_y) / (line_end_x - line_start_x)

    # Calculate the intersection point using the formula
    x_intersect = ((line_slope * line_start_x - line_start_y - ray_start_y + ray_start_x * math.tan(angle_rad)) /
                    (line_slope - math.tan(angle_rad)))
    y_intersect = line_slope * (x_intersect - line_start_x) + line_start_y

    # Calculate the length of line PT
    length_pt = math.sqrt((x_intersect - ray_start_x) ** 2 + (y_intersect - ray_start_y) ** 2)

    return (x_intersect, y_intersect, length_pt)

# Example usage
ray_start_x = 10
ray_start_y = 10
ray_angle = 45
line_start_x = 0
line_start_y = 0
line_end_x = 20
line_end_y = 20

intersection_point, length_pt = calculate_intersection(ray_start_x, ray_start_y, ray_angle, line_start_x, line_start_y, line_end_x, line_end_y)
print("Intersection point:", intersection_point)
print("Length of line PT:", length_pt)